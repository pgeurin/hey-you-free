AI-Powered Event Scheduling Application

OVERVIEW
AI-powered backend service that analyzes two Google calendars and suggests optimal meeting times when both participants are free and would enjoy the activity together.

ARCHITECTURE
- Clean Architecture: Separate I/O from business logic
- Functional Programming: No OOP, snake_case naming
- TDD Approach: Write tests first, commit when passing
- Backend Focus: API service with Google Calendar integration

TO DO

Calendar Import & Processing
- Google Calendar API Integration
  - X OAuth2 authentication flow
  - X Calendar data extraction
  - X Event parsing and normalization
- Data Processing Pipeline
  - X Convert calendar events to structured text
  - X Extract availability windows
  - X Parse event metadata (title, duration, type)

AI-Powered Suggestions
- AI Suggestion Engine
  - X Activity recommendation based on preferences
  - X Optimal time slot selection
  - X Context-aware suggestions
  - X Deterministic responses with seeding
- Response Validation
  - X JSON schema validation
  - X Energy level validation
  - X Meeting type validation
  - X Date/time format validation

API & Testing
- FastAPI Backend
  - X Health check endpoint
  - X Meeting suggestions endpoint
  - X CORS configuration
  - X Error handling
- Comprehensive Testing
  - X 198 test functions across 8 test files
  - X True end-to-end testing
  - X API integration tests
  - X Environment setup tests

User Management & Database
- Database Integration
  - X Database integration (SQLite/PostgreSQL)
  - X User table with name, calendar_id, oauth_tokens
  - X Database lookup for calendar names and OAuth credentials
  - X User authentication system
  - X API endpoints for user management
- User Management Features
  - X Update format_events_for_ai() to accept user names
  - X Update create_ai_prompt() to accept user names and optional time range parameters
  - X Update get_meeting_suggestions() to use database lookup for user calendar data
  - X Add conversation context storage and retrieval functionality
  - X Update API endpoints to use new user management system
  - X Test complete database integration with user management

Personality Testing
- X Make two new user calendars in testing env (a json file)
  - X give each different personalities and preferences
- X Make sure the event planner is typical
- X Created Alex (creative, flexible) and Sam (structured, professional)
- X Added comprehensive personality testing suite (10 new tests)
- X Verified AI adapts to different personality types

Web Interface
- Frontend Features
  - X Static HTML page with form
  - X Simple JavaScript for API calls
  - X Basic CSS for styling
  - X Server-side form handling
  - X Event confirmation page
- OAuth Integration
  - X Implement Google OAuth2 server-side flow
  - X Create OAuth callback endpoints
  - X Store user tokens in database
  - X Update web interface with working "Connect Calendar" button
  - X Add OAuth state management and security
  - X Test complete OAuth flow end-to-end
- Event Enhancement
  - X Add description field to event creation
  - X Update API to handle event descriptions
  - X Update web interface with description input
  - X Validate and sanitize description input

Website Autofill
- X Default form values for testing (Phil, Chris, coffee, description)
- X Quick-fill buttons for different user combinations
- X JavaScript fillForm() function for easy form population
- X Makes testing much easier with pre-filled forms

Calendar Event Creation
- X Google Calendar API event creation
- X Automatic event addition to both users' calendars
- X Event details population (location, description, attendees)
- X Calendar conflict detection (just notify)
- X User clicks on suggested events to create calendar entries
- X Event modification and cancellation

Testing fixes
- X calendar event types don't need to be strictly enforced for the AI. remove that from testing and code.
- X make each user have suggested friends
- X make each user have autoform filling (additional features)

Make event link for each of the 3 events
- X Add event_link and event_id fields to MeetingSuggestion model
- X Create API endpoint to create events from suggestion links
- X Update meeting suggestions to include event links
- X Write comprehensive tests for event links functionality

Make add a share button to each event
- X Add share_link field to MeetingSuggestion model
- X Create API endpoint /share/event/{suggestion_id} for sharing events
- X Update event_link_generator to include share links
- X Write comprehensive tests for share button functionality

User Invitation System
- Make url 
- Email invitation system for new users
- "Connect your calendar" onboarding flow
- User discovery by name/email
- Pending invitation management
- Calendar connection status tracking

Multi-User Group Planning
- Group creation and management
- Multi-user calendar analysis (3+ people)
- Group preference settings
- Group event suggestion algorithms
- Group confirmation workflow
- Group member management interface

Smart Context & Learning
- User preference learning from past events
- Context-aware suggestion algorithms
- Personalized activity recommendations
- Time preference learning (morning/evening person)
- Activity type preferences (coffee, outdoor, dinner)
- Historical pattern analysis

Production Readiness
- Rate limiting and security
- Production deployment
- Monitoring and logging
- Error handling and recovery

Advanced Features
- Multi-user support
- Recurring meeting suggestions
- Email notifications
- Mobile app integration

Text/SMS Integration
- X SMS/Text messaging integration (Twilio or similar)
- X Webhook endpoints for receiving SMS
- X Manual SMS sending functionality
- AI chat interface for meeting coordination
- Script-based conversation flows
- Text-to-meeting-scheduler integration
- Conversation history storage
- Multi-user text chat capabilities
- Natural language processing for meeting requests
- Automated meeting suggestion responses via text
- Rate limiting for SMS (200 texts/day warning to admin)

TECHNICAL STACK
- Language: Python 3.11+
- Framework: FastAPI
- Database: SQLite (development) / PostgreSQL (production)
- AI/ML: Gemini AI API
- Calendar: Google Calendar API v3
- Testing: pytest
- Environment: mamba (butterfly)
- Time Zone: Seattle (PST/PDT)

ENVIRONMENT CONFIGURATION
- Environment File: .env in project root directory
- Template File: env.template (copy to .env and fill values)
- Auto-loading: load_env.py automatically loads .env if present
- Required Variables: GOOGLE_API_KEY, SERVER_HOST, SERVER_PORT

PROJECT STRUCTURE
butterfly2/
├── src/
│   ├── core/           # Business logic (no I/O)
│   ├── adapters/       # External integrations
│   ├── infrastructure/ # Database, config
│   └── api/           # FastAPI routes
├── tests/              # 198 test functions
├── requirements.txt
└── data/              # Sample calendar data
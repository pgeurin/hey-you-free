#!/bin/bash

# heyyoufree Cloud SQL Setup Script
# This script sets up a PostgreSQL Cloud SQL instance for production

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🗄️  heyyoufree Cloud SQL Setup Script${NC}"
echo "======================================"

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    echo -e "${RED}❌ gcloud CLI is not installed. Please install it first.${NC}"
    exit 1
fi

# Get project ID
PROJECT_ID=$(gcloud config get-value project 2>/dev/null)
if [ -z "$PROJECT_ID" ]; then
    echo -e "${RED}❌ No project ID set. Please run: gcloud config set project YOUR_PROJECT_ID${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Using project: $PROJECT_ID${NC}"

# Configuration
INSTANCE_NAME="heyyoufree-db"
DATABASE_NAME="heyyoufree"
DB_USER="heyyoufree_user"
REGION="us-central1"
TIER="db-f1-micro"  # Smallest tier for cost efficiency

# Generate random password
DB_PASSWORD=$(openssl rand -base64 32)
echo -e "${YELLOW}🔐 Generated database password: $DB_PASSWORD${NC}"

# Enable required APIs
echo -e "${BLUE}📋 Enabling required APIs...${NC}"
gcloud services enable sqladmin.googleapis.com
gcloud services enable sql-component.googleapis.com

# Create Cloud SQL instance
echo -e "${BLUE}🔨 Creating Cloud SQL instance...${NC}"
gcloud sql instances create $INSTANCE_NAME \
    --database-version=POSTGRES_15 \
    --tier=$TIER \
    --region=$REGION \
    --storage-type=SSD \
    --storage-size=10GB \
    --storage-auto-increase \
    --backup \
    --enable-ip-alias \
    --authorized-networks=0.0.0.0/0 \
    --quiet

# Create database
echo -e "${BLUE}📊 Creating database...${NC}"
gcloud sql databases create $DATABASE_NAME \
    --instance=$INSTANCE_NAME \
    --quiet

# Create user
echo -e "${BLUE}👤 Creating database user...${NC}"
gcloud sql users create $DB_USER \
    --instance=$INSTANCE_NAME \
    --password=$DB_PASSWORD \
    --quiet

# Get instance connection name
CONNECTION_NAME=$(gcloud sql instances describe $INSTANCE_NAME --format="value(connectionName)")
echo -e "${GREEN}✅ Instance connection name: $CONNECTION_NAME${NC}"

# Get public IP
PUBLIC_IP=$(gcloud sql instances describe $INSTANCE_NAME --format="value(ipAddresses[0].ipAddress)")
echo -e "${GREEN}✅ Public IP: $PUBLIC_IP${NC}"

# Create environment file
echo -e "${BLUE}📝 Creating production environment file...${NC}"
cat > .env.production << EOF
# GCP Production Environment Configuration
# Generated by setup-cloud-sql.sh

# Google Gemini AI API Key (Required for AI suggestions)
GOOGLE_API_KEY=your_google_api_key_here

# Google Calendar API Configuration
GOOGLE_CALENDAR_CREDENTIALS_FILE=/app/credentials.json
GOOGLE_CALENDAR_TOKEN_FILE=/app/token.json

# Server Configuration
SERVER_HOST=0.0.0.0
SERVER_PORT=8000
DEBUG=false

# Logging Configuration
LOG_LEVEL=INFO
LOG_FORMAT=json

# Rate Limiting (requests per minute)
RATE_LIMIT_PER_MINUTE=60

# Database Configuration (Cloud SQL)
# Unix socket connection (recommended for Cloud Run)
DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@/$DATABASE_NAME?host=/cloudsql/$CONNECTION_NAME
# Public IP connection (alternative)
# DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@$PUBLIC_IP:5432/$DATABASE_NAME

# Security Configuration
SECRET_KEY=$(openssl rand -base64 32)
ALLOWED_ORIGINS=https://heyyoufree.appspot.com,https://heyyoufree.com

# GCP Specific
GOOGLE_CLOUD_PROJECT=$PROJECT_ID
GOOGLE_CLOUD_REGION=$REGION

# SMS Configuration (Twilio)
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_phone_number
EOF

echo -e "${GREEN}✅ Production environment file created: .env.production${NC}"

# Update Cloud Run service with database URL
echo -e "${BLUE}🚀 Updating Cloud Run service with database configuration...${NC}"
gcloud run services update heyyoufree \
    --region=$REGION \
    --set-env-vars="DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@/$DATABASE_NAME?host=/cloudsql/$CONNECTION_NAME" \
    --quiet

echo -e "${GREEN}✅ Cloud SQL setup completed successfully!${NC}"
echo ""
echo -e "${BLUE}📋 Summary:${NC}"
echo -e "  Instance: $INSTANCE_NAME"
echo -e "  Database: $DATABASE_NAME"
echo -e "  User: $DB_USER"
echo -e "  Connection: $CONNECTION_NAME"
echo -e "  Public IP: $PUBLIC_IP"
echo ""
echo -e "${BLUE}🔧 Next steps:${NC}"
echo -e "  1. Update your Cloud Run service with the new DATABASE_URL"
echo -e "  2. Deploy your application: ./deploy.sh"
echo -e "  3. Test the database connection"
echo ""
echo -e "${YELLOW}⚠️  Important:${NC}"
echo -e "  - Save the database password securely"
echo -e "  - Consider using Cloud SQL Proxy for local development"
echo -e "  - Monitor your database usage and costs"
echo ""
echo -e "${BLUE}🔗 Useful commands:${NC}"
echo -e "  Connect to database: gcloud sql connect $INSTANCE_NAME --user=$DB_USER --database=$DATABASE_NAME"
echo -e "  View instance: gcloud sql instances describe $INSTANCE_NAME"
echo -e "  View databases: gcloud sql databases list --instance=$INSTANCE_NAME"
